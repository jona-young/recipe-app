{"version":3,"sources":["general/Header.js","general/Footer.js","general/Cover.js","general/recipesSlice.js","general/SingleRecipe.js","general/RecipesRandom.js","general/MainContent.js","general/PageRecipe.js","App.js","general/photosSlice.js","store.js","serviceWorker.js","index.js"],"names":["Header","className","to","Footer","Cover","useState","coverPhoto","setCoverPhoto","photoCred","useEffect","fetch","then","res","json","result","console","log","urls","regular","user","username","name","alt_description","error","src","alt","href","target","rel","fetchRecipesRandom","createAsyncThunk","a","recipes","recipesSlice","createSlice","initialState","status","reducers","extraReducers","pending","state","action","fulfilled","concat","payload","rejected","message","selectRecipesRandom","selectRecipeById","recipeId","find","recipe","id","SingleRecipe","useSelector","image","title","RecipesRandom","content","dispatch","useDispatch","recipesStatus","recipesRandom","map","key","MainContent","PageRecipe","match","params","parseInt","dangerouslySetInnerHTML","__html","summary","App","exact","path","component","fetchRandomPhotos","photosSlice","photos","configureStore","reducer","photosReducer","recipesReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e0418b3b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nfunction Header () {\n    return (\n        <div className=\"header\">\n            <div className=\"header__left\">\n                <Link to=\"/\" className=\"header__headerLink\">\n                    <div className=\"header__icon\"></div>\n                    <span className=\"header__title\">DELISH</span>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer () {\n    return (\n        <div className=\"footer\">\n            <p>\n                This is a project to practice Redux with React JS.\n            </p>\n        </div>\n    )\n}\n\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport './Cover.css';\n\nfunction Cover () {\n    const [coverPhoto, setCoverPhoto] = useState(['#', ''])\n    const photoCred = `https://unsplash.com/@${coverPhoto[1]}?utm_source=recipes-app&utm_medium=referral`\n\n    useEffect (() => {\n        fetch('https://api.unsplash.com/photos/random/?client_id=cw1ZZ185SThdLPcEx7g4IherAzt-SFN9EdBKWOnjq-0&query=food&orientation=landscape')\n            .then(res => res.json())\n            .then((result) => {\n                console.log(\"Unsplash Random API Call: \", result)\n                setCoverPhoto([result.urls.regular, result.user.username, result.user.name, result.alt_description])\n            }, (error) => {\n                console.log(error)\n            })\n    }, [])\n\n    return (\n        <div className=\"cover\">\n            <img className=\"cover__coverImage\" src={coverPhoto[0]} alt={coverPhoto[3]} />\n            <div className=\"cover__coverAbout\">\n                <p className=\"cover__coverAboutTitle\">\n                    Welcome to DELISH!\n                </p>\n                <span className=\"cover__coverAboutText\">\n                    DELISH is your source for fresh new recipes updated daily with a variety of\n                    cuisines.  Our offerings are served to you in an easy to follow and simple to\n                    make set of instructions to get the most flavour!\n                </span>\n            </div>\n            <div className=\"cover__coverCred\">\n                <div className=\"cover__coverCredBox\">\n                    Photo by&nbsp;\n                    <a className=\"cover__coverLink\"\n                       href={photoCred}\n                       target=\"_blank\"\n                       rel=\"noopener noreferrer\"\n                    >\n                        {coverPhoto[2]}\n                    </a>\n                    &nbsp;on&nbsp;\n                    <a className=\"cover__coverLink\"\n                       href=\"https://unsplash.com/?utm_source=recipe-app&utm_medium=referral\"\n                       target=\"_blank\"\n                       rel=\"noopener noreferrer\"\n                    >\n                        Unsplash\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Cover;","import {\n    createSlice,\n    createAsyncThunk,\n} from '@reduxjs/toolkit';\n\nconst initialState = {\n    recipes: [],\n    status: 'idle',\n    error:null,\n}\n\nexport const fetchRecipesRandom = createAsyncThunk('recipes/fetchRecipesRandom', async() => {\n    return fetch('https://api.spoonacular.com/recipes/random?apiKey=4e659ccc41a4462b804b15dee778f554&limitLicense=true&number=6')\n        .then(res => res.json())\n        .then((result) => {\n            console.log('spoontacular API call: ', result.recipes)\n            return result.recipes\n        })\n})\n\n\nconst recipesSlice = createSlice({\n    name: 'recipes',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [fetchRecipesRandom.pending]: (state, action) => {\n            state.status = 'loading'\n        },\n        [fetchRecipesRandom.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.recipes = state.recipes.concat(action.payload)\n        },\n        [fetchRecipesRandom.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.error.message\n        }\n    }\n})\n\nexport default recipesSlice.reducer;\n\nexport const selectRecipesRandom = state => state.recipes.recipes;\n\nexport const selectRecipeById = (state, recipeId) =>\n    state.recipes.recipes.find((recipe) => recipe.id === recipeId)","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectRecipeById } from './recipesSlice.js';\nimport './RecipesRandom.css';\n\nfunction SingleRecipe ({recipeId}) {\n    const recipe = useSelector(state => selectRecipeById(state, recipeId.id))\n\n    return (\n        <div className=\"recipes__contentBox\">\n            <Link to={`/recipes/${recipe.id}`} className=\"recipes__boxLink\">\n                <img className=\"recipes__boxImg\" src={ recipe.image } alt={ recipe.id } />\n                <p className=\"recipes__boxText\">{ recipe.title }</p>\n            </Link>\n        </div>\n    )\n}\n\nexport default SingleRecipe;","import React, { useEffect } from 'react';\nimport SingleRecipe from './SingleRecipe.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchRecipesRandom, selectRecipesRandom } from './recipesSlice.js';\nimport './RecipesRandom.css';\n\nfunction RecipesRandom () {\n    const dispatch = useDispatch()\n    const recipesStatus = useSelector(state => state.recipes.status)\n    const error = useSelector(state => state.recipes.error)\n    const recipesRandom = useSelector(selectRecipesRandom)\n\n    useEffect (() => {\n        if (recipesStatus === 'idle') {\n            dispatch(fetchRecipesRandom())\n        }\n    }, [recipesStatus, dispatch])\n\n    let content\n\n    if (recipesStatus === 'loading') {\n        content = <div className=\"loader\">Loading...</div>\n    } else if (recipesStatus === 'succeeded') {\n        content = recipesRandom.map(recipeId => (\n            <SingleRecipe key={recipeId.id} recipeId={recipeId} />\n        ))\n    } else if (recipesStatus === 'error') {\n        content = <div>{error}</div>\n    }\n\n    return (\n        <div className=\"recipes\">\n            <div className=\"recipes__content\">\n                { content }\n            </div>\n        </div>\n    )\n}\n\nexport default RecipesRandom;","import React from 'react';\nimport Cover from './Cover.js';\nimport RecipesRandom from './RecipesRandom.js';\n\nfunction MainContent () {\n    return (\n        <div>\n            <Cover />\n            <RecipesRandom />\n        </div>\n    )\n}\n\nexport default MainContent;","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {fetchRecipesRandom, selectRecipeById, selectRecipesRandom} from './recipesSlice.js';\nimport './PageRecipe.css';\nimport SingleRecipe from \"./SingleRecipe\";\n\nfunction PageRecipe ({ match }) {\n    const { recipeId } = match.params\n    const recipe = useSelector(state => selectRecipeById(state, parseInt(recipeId)))\n\n    const dispatch = useDispatch()\n    const recipesStatus = useSelector(state => state.recipes.status)\n    const error = useSelector(state => state.recipes.error)\n    const recipesRandom = useSelector(selectRecipesRandom)\n\n    useEffect (() => {\n        if (recipesStatus === 'idle') {\n            dispatch(fetchRecipesRandom())\n        }\n    }, [recipesStatus, dispatch])\n\n    let content\n\n    if (recipesStatus === 'loading') {\n        content = <div className=\"loader\">Loading...</div>\n    } else if (recipesStatus === 'succeeded') {\n        content = recipesRandom.map(recipeId => (\n            <SingleRecipe key={recipeId.id} recipeId={recipeId} />\n        ))\n    } else if (recipesStatus === 'error') {\n        content = <div>{error}</div>\n    }\n\n    if (!recipe) {\n        return (\n            <div className=\"pagerecipe\">\n                <h2>Recipe not found!</h2>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"pagerecipe\">\n            <h2 className=\"pagerecipe__title\">{recipe.title}</h2>\n            <img className=\"pagerecipe__image\" src={ recipe.image } alt={ recipe.id } />\n            <div dangerouslySetInnerHTML={{ __html: recipe.summary }}\n                 className=\"pagerecipe__instructions\"\n            />\n            <h4 className=\"pagerecipe__lowtitle\">6 Recipes</h4>\n            <div className=\"pagerecipe__bottomrecipes\">\n                {content}\n            </div>\n        </div>\n    )\n}\n\nexport default PageRecipe;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from 'react-router-dom';\nimport Header from './general/Header.js';\nimport Footer from './general/Footer.js';\nimport MainContent from './general/MainContent.js';\nimport PageRecipe from './general/PageRecipe.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n        <Header />\n        <div className=\"App\">\n            <Switch>\n                <Route exact path=\"/\">\n                    <MainContent />\n                </Route>\n                <Route exact path=\"/recipes/:recipeId\" component={PageRecipe} />\n                <Redirect to=\"/\" />\n            </Switch>\n        </div>\n        <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import {\n    createSlice,\n    createAsyncThunk,\n} from '@reduxjs/toolkit';\n\nconst initialState = {\n    photos: [],\n    status: 'idle',\n    error: null,\n}\n\n//TODO - pass parameter in async() in order to pull search term from spoontacular API to find Unsplash photo\nexport const fetchRandomPhotos = createAsyncThunk('photos/fetchRandomPhotos', async () => {\n    return fetch('https://api.unsplash.com/photos/random/?client_id=cw1ZZ185SThdLPcEx7g4IherAzt-SFN9EdBKWOnjq-0&query=food&orientation=landscape')\n        .then(res => res.json())\n        .then((result) => {\n            console.log(\"Unsplash Random API Call: \", result)\n            const resCoverPhoto = [result.urls.regular, result.user.username]\n            return resCoverPhoto\n        }, (error) => {\n            console.log(error)\n        })\n})\n\nconst photosSlice = createSlice({\n    name: 'photos',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [fetchRandomPhotos.pending]: (state, action) => {\n            state.status = 'loading'\n        },\n        [fetchRandomPhotos.fulfilled]: (state, action) => {\n            state.status = 'succeeded'\n            state.photos = action.payload\n\n        },\n        [fetchRandomPhotos.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.error.message\n        }\n    }\n})\n\nexport default photosSlice.reducer;\n\nexport const selectPhotosRandom = state => state.photos.photos","import { configureStore } from '@reduxjs/toolkit';\nimport photosReducer from './general/photosSlice.js';\nimport recipesReducer from './general/recipesSlice.js';\n\nexport default configureStore({\n    reducer: {\n        photos: photosReducer,\n        recipes: recipesReducer,\n    }\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store.js';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}